import cv2
import numpy as np
import os
import csv
import pickle
from sklearn.neighbors import KNeighborsClassifier
from datetime import datetime
from sklearn.metrics.pairwise import cosine_similarity

# Load face detection model
facedetect = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

# Ensure data directory exists
if not os.path.exists('data'):
    os.makedirs('data')

# Load stored face data and names
if os.path.exists('data/names.pkl'):
    with open('data/names.pkl', 'rb') as w:
        LABELS = pickle.load(w)
else:
    print("Error: names.pkl not found!")
    exit()

if os.path.exists('data/faces_data.pkl'):
    with open('data/faces_data.pkl', 'rb') as f:
        FACES = pickle.load(f)
else:
    print("Error: faces_data.pkl not found!")
    exit()

# Check if face and label counts match
if len(LABELS) != len(FACES):
    print(f"Error: Number of labels ({len(LABELS)}) does not match number of faces ({len(FACES)})")
    exit()

# Train KNN classifier
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(FACES, LABELS)

# Ensure Attendance directory exists
if not os.path.exists('Attendance'):
    os.makedirs('Attendance')

# Get today's date for attendance file
date = datetime.now().strftime("%d-%m-%y")
attendance_file = f"Attendance/Attendance_{date}.csv"

# Load reference photo
reference_img_path = "reference.jpg"  # Change this to the correct path
if not os.path.exists(reference_img_path):
    print(f"Error: Reference image {reference_img_path} not found!")
    exit()

reference_img = cv2.imread(reference_img_path)
gray_ref = cv2.cvtColor(reference_img, cv2.COLOR_BGR2GRAY)
faces_ref = facedetect.detectMultiScale(gray_ref, scaleFactor=1.3, minNeighbors=5)

if len(faces_ref) == 0:
    print("No face detected in the reference image.")
    exit()

# Extract and process the face from the reference image
(x, y, w, h) = faces_ref[0]
ref_face = reference_img[y:y+h, x:x+w]
ref_face_resized = cv2.resize(ref_face, (50, 50)).flatten().reshape(1, -1)

# Start video capture
video = cv2.VideoCapture(0)
ret, frame = video.read()

if not ret:
    print("Error: Could not capture image from camera.")
    video.release()
    exit()

# Convert frame to grayscale
gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

# Detect faces in the captured frame
faces = facedetect.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

if len(faces) == 0:
    print("No face detected in live camera.")
    person_name = "Unknown"
    status = "Absent"
else:
    for (x, y, w, h) in faces:
        live_face = frame[y:y+h, x:x+w]
        live_face_resized = cv2.resize(live_face, (50, 50)).flatten().reshape(1, -1)

        # Compare similarity using Cosine Similarity
        similarity = cosine_similarity(ref_face_resized, live_face_resized)[0][0]

        print(f"Face Similarity Score: {similarity:.2f}")

        # Set a similarity threshold (Adjust if needed)
        threshold = 0.75
        if similarity >= threshold:
            try:
                # Recognize the person
                person_name = knn.predict(live_face_resized)[0]
                status = "Present"
            except Exception:
                person_name = "Unknown"
                status = "Absent"
        else:
            person_name = "Unknown"
            status = "Absent"

# Get current timestamp
timestamp = datetime.now().strftime("%H:%M:%S")

# Attendance data
attendance = [str(person_name), str(timestamp), str(status)]

# Save attendance to CSV
file_exists = os.path.isfile(attendance_file)

with open(attendance_file, "a", newline="") as csvfile:
    writer = csv.writer(csvfile)
    if not file_exists:
        writer.writerow(["NAME", "TIME", "STATUS"])  # Column headers
    writer.writerow(attendance)  # Attendance record

print(f"Attendance Marked: {person_name} - {status} at {timestamp}")

# Release video capture and close OpenCV window
video.release()
cv2.destroyAllWindows()


------------------------------
db_connection code
import cv2
import numpy as np
import mysql.connector
import pickle
import csv
from sklearn.neighbors import KNeighborsClassifier
from datetime import datetime
from sklearn.metrics.pairwise import cosine_similarity

# Connect to MySQL
conn = mysql.connector.connect(host="localhost", user="root", password="15052003", database="FaceRecognition")
cursor = conn.cursor()

# Load face detection model
facedetect = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")

# Load stored face data from MySQL
cursor.execute("SELECT name, face_data FROM faces")
records = cursor.fetchall()

if not records:
    print("No face data found in database!")
    exit()

# Extract names and face data
LABELS = []
FACES = []

for name, face_blob in records:
    face_array = pickle.loads(face_blob)
    LABELS.extend([name] * len(face_array))
    FACES.extend(face_array)

FACES = np.array(FACES).reshape(len(LABELS), -1)

# Train KNN classifier
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(FACES, LABELS)

# Get current date and time
date = datetime.now().strftime("%Y-%m-%d")
day = datetime.now().strftime("%A")
timestamp = datetime.now().strftime("%H:%M:%S")

# Start video capture
video = cv2.VideoCapture(0)
ret, frame = video.read()

if not ret:
    print("Error: Could not capture image.")
    video.release()
    exit()

gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
faces = facedetect.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

if len(faces) == 0:
    print("No face detected.")
    person_name = "Unknown"
    status = "-"
else:
    for (x, y, w, h) in faces:
        live_face = frame[y:y+h, x:x+w]
        live_face_resized = cv2.resize(live_face, (50, 50)).flatten().reshape(1, -1)

        # Compare similarity
        similarity = cosine_similarity(live_face_resized, live_face_resized)[0][0]
        print(f"Face Similarity Score: {similarity:.2f}")

        threshold = 0.75
        if similarity >= threshold:
            try:
                person_name = knn.predict(live_face_resized)[0]
                status = "Present"
            except Exception:
                person_name = "Unknown"
                status = "-"
        else:
            person_name = "Unknown"
            status = "-"

# Insert attendance into MySQL
cursor.execute("INSERT INTO attendance (date, day, name, time, status) VALUES (%s, %s, %s, %s, %s)",
               (date, day, str(person_name), timestamp, status))

conn.commit()

print(f"Attendance Marked: {person_name} - {status} at {timestamp} on {date} ({day})")

# Close database connection
cursor.close()
conn.close()

# Release video capture
video.release()
cv2.destroyAllWindows()

-------------------------------

csv addtion 

import cv2
import numpy as np
import mysql.connector
import pickle
import csv
from sklearn.neighbors import KNeighborsClassifier
from datetime import datetime
from sklearn.metrics.pairwise import cosine_similarity

# Connect to MySQL
conn = mysql.connector.connect(host="localhost", user="root", password="15052003", database="FaceRecognition")
cursor = conn.cursor()

# Load face detection model
facedetect = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")

# Load stored face data from MySQL
cursor.execute("SELECT name, face_data FROM faces")
records = cursor.fetchall()

if not records:
    print("No face data found in database!")
    exit()

# Extract names and face data
LABELS = []
FACES = []

for name, face_blob in records:
    face_array = pickle.loads(face_blob)
    LABELS.extend([name] * len(face_array))
    FACES.extend(face_array)

FACES = np.array(FACES).reshape(len(LABELS), -1)

# Train KNN classifier
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(FACES, LABELS)

# Get current date and time
date = datetime.now().strftime("%Y-%m-%d")
day = datetime.now().strftime("%A")
timestamp = datetime.now().strftime("%H:%M:%S")

# Start video capture
video = cv2.VideoCapture(0)
ret, frame = video.read()

if not ret:
    print("Error: Could not capture image.")
    video.release()
    exit()

gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
faces = facedetect.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

if len(faces) == 0:
    print("No face detected.")
    person_name = "Unknown"
    status = "-"
else:
    for (x, y, w, h) in faces:
        live_face = frame[y:y+h, x:x+w]
        live_face_resized = cv2.resize(live_face, (50, 50)).flatten().reshape(1, -1)

        # Compare similarity
        similarity = cosine_similarity(live_face_resized, live_face_resized)[0][0]
        print(f"Face Similarity Score: {similarity:.2f}")

        threshold = 0.75
        if similarity >= threshold:
            try:
                person_name = knn.predict(live_face_resized)[0]
                status = "Present"
            except Exception:
                person_name = "Unknown"
                status = "-"
        else:
            person_name = "Unknown"
            status = "-"

# Insert attendance into MySQL
cursor.execute("INSERT INTO attendance (date, day, name, time, status) VALUES (%s, %s, %s, %s, %s)",
               (date, day, str(person_name), timestamp, status))

conn.commit()

print(f"Attendance Marked: {person_name} - {status} at {timestamp} on {date} ({day})")

# Fetch all attendance records from the 'attendance' table
cursor.execute("SELECT * FROM attendance")
attendance_records = cursor.fetchall()

# Check if any records are fetched
if not attendance_records:
    print("No attendance records found!")
else:
    # Open a CSV file to write the attendance records
    with open("attendance_data.csv", mode="w", newline="") as file:
        writer = csv.writer(file)

        # Write the header row
        writer.writerow(["ID", "Date", "Day", "Name", "Time", "Status"])

        # Write the attendance records
        for record in attendance_records:
            record_id, date, day, name, time, status = record
            writer.writerow([record_id, date, day, name, time, status])

    print("Attendance data has been written to attendance_data.csv")


# Close database connection
cursor.close()
conn.close()

# Release video capture
video.release()
cv2.destroyAllWindows()


--------------------
complete code 

import cv2
import numpy as np
import mysql.connector
import pickle
import csv
from sklearn.neighbors import KNeighborsClassifier
from datetime import datetime
from sklearn.metrics.pairwise import cosine_similarity

# Connect to MySQL
conn = mysql.connector.connect(host="localhost", user="root", password="15052003", database="FaceRecognition")
cursor = conn.cursor()

# Load face detection model
facedetect = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")

# Load stored face data from MySQL
cursor.execute("SELECT name, face_data FROM faces")
records = cursor.fetchall()

if not records:
    print("No face data found in database!")
    exit()

# Extract names and face data
LABELS = []
FACES = []

for name, face_blob in records:
    face_array = pickle.loads(face_blob)
    LABELS.extend([name] * len(face_array))
    FACES.extend(face_array)

FACES = np.array(FACES).reshape(len(LABELS), -1)

# Train KNN classifier
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(FACES, LABELS)

# Get current date and time
date = datetime.now().strftime("%Y-%m-%d")
day = datetime.now().strftime("%A")
timestamp = datetime.now().strftime("%H:%M:%S")

# Start video capture
video = cv2.VideoCapture(0)
ret, frame = video.read()

if not ret:
    print("Error: Could not capture image.")
    video.release()
    exit()

gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
faces = facedetect.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

if len(faces) == 0:
    print("No face detected.")
    person_name = "Unknown"
    status = "-"
else:
    for (x, y, w, h) in faces:
        live_face = frame[y:y+h, x:x+w]
        live_face_resized = cv2.resize(live_face, (50, 50)).flatten().reshape(1, -1)

        # Compare similarity
        similarity = cosine_similarity(live_face_resized, live_face_resized)[0][0]
        print(f"Face Similarity Score: {similarity:.2f}")

        threshold = 0.75
        if similarity >= threshold:
            try:
                person_name = knn.predict(live_face_resized)[0]
                status = "Present"
            except Exception:
                person_name = "Unknown"
                status = "-"
        else:
            person_name = "Unknown"
            status = "-"

# Insert attendance into MySQL
cursor.execute("INSERT INTO attendance (date, day, name, time, status) VALUES (%s, %s, %s, %s, %s)",
               (date, day, str(person_name), timestamp, status))

conn.commit()

print(f"Attendance Marked: {person_name} - {status} at {timestamp} on {date} ({day})")

# Fetch all attendance records from the 'attendance' table
cursor.execute("SELECT * FROM attendance")
attendance_records = cursor.fetchall()

# Check if any records are fetched
if not attendance_records:
    print("No attendance records found!")
else:
    # Open a CSV file to write the attendance records
    with open("attendance_data.csv", mode="w", newline="") as file:
        writer = csv.writer(file)

        # Write the header row
        writer.writerow(["ID", "Date", "Day", "Name", "Time", "Status"])

        # Write the attendance records
        for record in attendance_records:
            record_id, date, day, name, time, status = record
            writer.writerow([record_id, date, day, name, time, status])

    print("Attendance data has been written to attendance_data.csv")


# Close database connection
cursor.close()
conn.close()

# Release video capture
video.release()
cv2.destroyAllWindows()


